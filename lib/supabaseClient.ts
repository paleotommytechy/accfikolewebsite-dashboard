
import { createClient, SupabaseClient } from '@supabase/supabase-js';

// --- IMPORTANT ---
// These credentials must be stored in environment variables.
// In development, you can use a .env file. For production, configure them
// on your hosting platform.
const supabaseUrl = 'https://tblkfcafwjconemdcrpk.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRibGtmY2Fmd2pjb25lbWRjcnBrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI4MjMwNDksImV4cCI6MjA2ODM5OTA0OX0.RMf4-H4z9I8rdzroyl_an390s0SggD_5TqPw30vDV5Q';

// The createClient function requires strings. If the env vars are missing,
// we initialize supabase as null and the app will show a degraded state.
export const supabase: SupabaseClient | null = (supabaseUrl && supabaseAnonKey)
    ? createClient(supabaseUrl, supabaseAnonKey)
    : null;

if (!supabase) {
    console.error("Supabase URL and/or Anon Key are missing from environment variables (SUPABASE_URL, SUPABASE_ANON_KEY). The application will not be able to connect to Supabase and will be in a read-only/mocked state.");
}

/**
 * --- RECOMMENDED SUPABASE SETUP ---
 * 
 * 1. Authentication:
 *    - Enable Email provider.
 *    - Disable "Enable email confirmations" in development for easier testing.
 * 
 * 2. Database Tables & SQL Snippets:
 *    - Run the following SQL in your Supabase project's SQL Editor
 *      to create the necessary tables for the application features.
 * 
 *    ```sql
 *    -- ================================================================================================
 *    -- === FIX: USER PROFILE & ROLE SETUP (Run this section to fix sign-up & RLS errors)            ===
 *    -- ================================================================================================
 *
 *    -- 1. Create public.profiles table
 *    CREATE TABLE IF NOT EXISTS public.profiles (
 *        id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
 *        full_name text,
 *        avatar_url text,
 *        fellowship_position text,
 *        level integer DEFAULT 1 NOT NULL,
 *        department text,
 *        gender text,
 *        dob text,
 *        whatsapp text,
 *        hotline text,
 *        email text UNIQUE,
 *        coins integer DEFAULT 0 NOT NULL,
 *        created_at timestamp with time zone DEFAULT now(),
 *        updated_at timestamp with time zone DEFAULT now()
 *    );
 *    COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';
 *
 *    -- 2. Create user_roles table
 *    CREATE TABLE IF NOT EXISTS public.user_roles (
 *        id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 *        user_id uuid NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
 *        role text NOT NULL CHECK (role IN ('member', 'admin')),
 *        created_at timestamp with time zone DEFAULT now()
 *    );
 *    COMMENT ON TABLE public.user_roles IS 'Stores a single role for each user (e.g., member, admin).';
 *
 *    -- 3. Enable Row Level Security (RLS) for tables
 *    ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
 *    ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
 *
 *    -- 4. Create RLS policies for profiles table
 *    DROP POLICY IF EXISTS "Authenticated users can view profiles" ON public.profiles;
 *    DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
 *    DROP POLICY IF EXISTS "Users can insert their own profile" ON public.profiles; -- ADDED: Drop policy if exists
 *    CREATE POLICY "Authenticated users can view profiles" ON public.profiles FOR SELECT TO authenticated USING (true);
 *    CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);
 *    CREATE POLICY "Users can insert their own profile" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id); -- SOLUTION: Added missing INSERT policy
 *
 *    -- Helper function to get the current user's role. This is used in RLS policies
 *    -- on the user_roles table to prevent an infinite recursion error where a policy
 *    -- would need to check the same table it is being applied to.
 *    CREATE OR REPLACE FUNCTION public.get_my_role()
 *    RETURNS TEXT
 *    LANGUAGE sql
 *    STABLE
 *    SECURITY DEFINER
 *    -- Set a search_path to ensure the function can find the 'user_roles' table.
 *    SET search_path = public
 *    AS $$
 *      SELECT role FROM user_roles WHERE user_id = auth.uid();
 *    $$;
 *
 *    -- 5. Create RLS policies for user_roles table
 *    DROP POLICY IF EXISTS "Users can manage and view appropriate roles" ON public.user_roles; -- Drop old policy
 *    DROP POLICY IF EXISTS "Users can view their own role, admins can view all" ON public.user_roles;
 *    DROP POLICY IF EXISTS "Admins can insert new roles" ON public.user_roles;
 *    DROP POLICY IF EXISTS "Users can create their own role, admins can insert any" ON public.user_roles;
 *    DROP POLICY IF EXISTS "New users can create their own member role" ON public.user_roles; -- ADDED: Drop policy if exists
 *    DROP POLICY IF EXISTS "Admins can update roles" ON public.user_roles;
 *    DROP POLICY IF EXISTS "Admins can delete roles" ON public.user_roles;
 *
 *    -- Policy for SELECT: Users can see their own role, admins can see all roles.
 *    CREATE POLICY "Users can view their own role, admins can view all" ON public.user_roles
 *    FOR SELECT
 *    USING ( (auth.uid() = user_id) OR (public.get_my_role() = 'admin') );
 *    
 *    -- SOLUTION: Replaced the recursive INSERT policy with a secure, non-recursive one.
 *    -- A new user can insert their own initial 'member' role. This prevents a user
 *    -- from making themselves an admin. Admins should use the 'update_user_role'
 *    -- function to elevate privileges, so an admin INSERT policy is not needed.
 *    CREATE POLICY "New users can create their own member role" ON public.user_roles
 *    FOR INSERT
 *    WITH CHECK ( auth.uid() = user_id AND role = 'member' );
 *
 *    -- Policy for UPDATE: Only admins can update roles.
 *    CREATE POLICY "Admins can update roles" ON public.user_roles
 *    FOR UPDATE
 *    USING ( public.get_my_role() = 'admin' )
 *    WITH CHECK ( public.get_my_role() = 'admin' );
 *    
 *    -- Policy for DELETE: Only admins can delete roles.
 *    CREATE POLICY "Admins can delete roles" ON public.user_roles
 *    FOR DELETE
 *    USING ( public.get_my_role() = 'admin' );
 *
 *    -- 6. Create function to handle new user creation
 *    -- This function is triggered when a new user signs up.
 *    CREATE OR REPLACE FUNCTION public.handle_new_user()
 *    RETURNS trigger
 *    LANGUAGE plpgsql
 *    SECURITY DEFINER
 *    AS $$
 *    BEGIN
 *      -- Insert a new row into public.profiles
 *      INSERT INTO public.profiles (id, email, full_name)
 *      VALUES (
 *        new.id,
 *        new.email,
 *        new.raw_user_meta_data->>'full_name'
 *      );
 *
 *      -- Insert a default role for the new user into public.user_roles
 *      INSERT INTO public.user_roles (user_id, role)
 *      VALUES (new.id, 'member');
 *
 *      RETURN new;
 *    END;
 *    $$;
 *
 *    -- 7. Create a trigger to call the function on new user sign-up
 *    DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
 *    CREATE TRIGGER on_auth_user_created
 *      AFTER INSERT ON auth.users
 *      FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
 *
 *    -- 8. Create admin RPC functions used by the app
 *    -- FIX: Updated RPC functions to use the get_my_role() helper to prevent potential recursion.
 *    CREATE OR REPLACE FUNCTION public.update_user_role(target_user_id uuid, new_role text)
 *    RETURNS void
 *    LANGUAGE plpgsql
 *    SECURITY DEFINER AS $$
 *    BEGIN
 *      IF public.get_my_role() != 'admin' THEN
 *        RAISE EXCEPTION 'Only admins can change user roles.';
 *      END IF;
 *      UPDATE public.user_roles SET role = new_role WHERE user_id = target_user_id;
 *    END;
 *    $$;
 *
 *    CREATE OR REPLACE FUNCTION public.delete_user_account(target_user_id uuid)
 *    RETURNS void
 *    LANGUAGE plpgsql
 *    SECURITY DEFINER AS $$
 *    BEGIN
 *      IF public.get_my_role() != 'admin' THEN
 *        RAISE EXCEPTION 'Only admins can delete users.';
 *      END IF;
 *      DELETE FROM auth.users WHERE id = target_user_id;
 *    END;
 *    $$;
 *
 *    -- ================================================================================================
 *    -- === RESOURCE LIBRARY SETUP (NEW)                                                          ===
 *    -- ================================================================================================
 *    -- Create resources table
 *    CREATE TABLE IF NOT EXISTS public.resources (
 *        id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
 *        title text NOT NULL,
 *        description text,
 *        category text NOT NULL CHECK (category IN ('Sermon Notes', 'Bible Studies', 'Leadership Training', 'Worship Guides', 'Other')),
 *        url text NOT NULL,
 *        thumbnail_url text,
 *        created_at timestamp with time zone DEFAULT now()
 *    );
 *    COMMENT ON TABLE public.resources IS 'Stores materials like sermon notes, study guides, and videos.';
 *
 *    -- Enable RLS
 *    ALTER TABLE public.resources ENABLE ROW LEVEL SECURITY;
 *
 *    -- Policies
 *    DROP POLICY IF EXISTS "Authenticated users can view resources" ON public.resources;
 *    CREATE POLICY "Authenticated users can view resources" ON public.resources
 *    FOR SELECT
 *    TO authenticated
 *    USING (true);
 *
 *    DROP POLICY IF EXISTS "Admins can manage resources" ON public.resources;
 *    CREATE POLICY "Admins can manage resources" ON public.resources
 *    FOR ALL
 *    USING (public.get_my_role() = 'admin')
 *    WITH CHECK (public.get_my_role() = 'admin');
 *
 *
 *    -- ================================================================================================
 *    -- === PUSH NOTIFICATION SETUP (NEW)                                                          ===
 *    -- ================================================================================================
 *    -- Create push_subscriptions table
 *    CREATE TABLE IF NOT EXISTS public.push_subscriptions (
 *        id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
 *        user_id uuid NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
 *        subscription_object jsonb NOT NULL,
 *        created_at timestamp with time zone DEFAULT now()
 *    );
 *    COMMENT ON TABLE public.push_subscriptions IS 'Stores user push notification subscriptions.';
 *
 *    -- Enable RLS
 *    ALTER TABLE public.push_subscriptions ENABLE ROW LEVEL SECURITY;
 *
 *    -- Policies
 *    DROP POLICY IF EXISTS "Users can manage their own subscriptions" ON public.push_subscriptions;
 *    CREATE POLICY "Users can manage their own subscriptions" ON public.push_subscriptions
 *    FOR ALL
 *    USING (auth.uid() = user_id)
 *    WITH CHECK (auth.uid() = user_id);
 *
 *    -- ================================================================================================
 *    -- === APP-SPECIFIC FEATURES (Existing setup)                                                   ===
 *    -- ================================================================================================
 *
 *    -- Create messages table
 *    CREATE TABLE IF NOT EXISTS public.messages (
 *        id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
 *        sender_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
 *        recipient_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
 *        text text,
 *        created_at timestamp with time zone DEFAULT now(),
 *        is_read boolean DEFAULT false
 *    );
 *    COMMENT ON TABLE public.messages IS 'Stores private messages between users.';
 * 
 *    -- Add media support to messages table (run this block once)
 *    ALTER TABLE public.messages ADD COLUMN IF NOT EXISTS message_type text DEFAULT 'text'::text NOT NULL;
 *    ALTER TABLE public.messages ADD COLUMN IF NOT EXISTS media_url text;
 *    ALTER TABLE public.messages ALTER COLUMN text DROP NOT NULL;
 *    ALTER TABLE public.messages ADD CONSTRAINT text_or_media_check CHECK (((text IS NOT NULL AND text <> '') OR (media_url IS NOT NULL)));
 *
 *    -- Enable Row Level Security for the messages table
 *    ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
 * 
 *    -- Drop any old, less specific policies if they exist
 *    DROP POLICY IF EXISTS "Allow users to manage their own messages" ON public.messages;
 * 
 *    -- Create policies for the messages table
 *    CREATE POLICY "Allow users to read their own messages"
 *    ON public.messages FOR SELECT
 *    USING (auth.uid() = sender_id OR auth.uid() = recipient_id);
 * 
 *    CREATE POLICY "Allow users to send messages"
 *    ON public.messages FOR INSERT
 *    WITH CHECK (auth.uid() = sender_id);
 * 
 *    CREATE POLICY "Allow users to mark received messages as read"
 *    ON public.messages FOR UPDATE
 *    USING (auth.uid() = recipient_id)
 *    WITH CHECK (auth.uid() = recipient_id);
 * 
 *    CREATE POLICY "Allow users to delete their own sent messages"
 *    ON public.messages FOR DELETE
 *    USING (auth.uid() = sender_id);
 *
 *    -- Create function to mark messages as read
 *    CREATE OR REPLACE FUNCTION public.mark_messages_as_read(p_sender_id uuid)
 *    RETURNS VOID
 *    LANGUAGE plpgsql
 *    SECURITY DEFINER
 *    AS $$
 *    BEGIN
 *      UPDATE public.messages
 *      SET is_read = true
 *      WHERE recipient_id = auth.uid()
 *        AND sender_id = p_sender_id
 *        AND is_read = false;
 *    END;
 *    $$;
 * 
 *    -- Create function to get chat history
 *    create or replace function get_chat_history()
 *    returns table (
 *        other_user_id uuid,
 *        other_user_name text,
 *        other_user_avatar text,
 *        last_message_text text,
 *        last_message_at timestamptz,
 *        unread_count bigint
 *    )
 *    language sql security definer
 *    as $$
 *    with conversations as (
 *        select
 *            case
 *                when sender_id = auth.uid() then recipient_id
 *                else sender_id
 *            end as other_user_id,
 *            text,
 *            message_type, -- Added message_type
 *            created_at,
 *            case
 *                when recipient_id = auth.uid() and is_read = false then 1
 *                else 0
 *            end as is_unread
 *        from messages
 *        where sender_id = auth.uid() or recipient_id = auth.uid()
 *    ),
 *    ranked_conversations as (
 *        select
 *            other_user_id,
 *            text,
 *            message_type, -- Propagate message_type
 *            created_at,
 *            is_unread,
 *            row_number() over(partition by other_user_id order by created_at desc) as rn
 *        from conversations
 *    ),
 *    latest_messages as (
 *        select
 *            other_user_id,
 *            -- Use a CASE statement to show a placeholder for non-text messages
 *            case
 *                when message_type = 'audio' and (text is null or text = '') then 'Sent a voice message'
 *                else text
 *            end as last_message_text,
 *            created_at as last_message_at
 *        from ranked_conversations
 *        where rn = 1
 *    ),
 *    unread_counts as (
 *        select
 *            other_user_id,
 *            sum(is_unread) as unread_count
 *        from conversations
 *        group by other_user_id
 *    )
 *    select
 *        u.other_user_id,
 *        p.full_name as other_user_name,
 *        p.avatar_url as other_user_avatar,
 *        l.last_message_text,
 *        l.last_message_at,
 *        coalesce(u.unread_count, 0) as unread_count
 *    from unread_counts u
 *    join latest_messages l on u.other_user_id = l.other_user_id
 *    join profiles p on u.other_user_id = p.id
 *    order by l.last_message_at desc;
 *    $$;
 *
 *    -- This function aggregates various metrics for the leader analytics dashboard.
 *    -- It should be called from a secure, admin-only context.
 *    -- The `security definer` setting allows it to bypass RLS to count across all users.
 *    create or replace function get_dashboard_analytics()
 *    returns json
 *    language plpgsql
 *    security definer
 *    as $$
 *    declare
 *      total_members_count int;
 *      new_members_count int;
 *      active_users_count int;
 *      avg_completion numeric;
 *      weekly_completion_data json;
 *      engagement_data json;
 *      result json;
 *    begin
 *      -- 1. Total members count
 *      select count(*) into total_members_count from public.profiles;
 *
 *      -- 2. New members this month
 *      select count(*) into new_members_count from public.profiles
 *      where created_at >= date_trunc('month', now());
 *
 *      -- 3. Active users in last 24 hours (based on last sign-in)
 *      select count(*) into active_users_count from auth.users
 *      where last_sign_in_at >= now() - interval '24 hours';
 *
 *      -- 4. Average task completion rate over the last 4 weeks
 *      select
 *        coalesce(
 *          (count(*) filter (where status = 'done')) * 100.0 / nullif(count(*), 0),
 *          0
 *        )
 *      into avg_completion
 *      from public.tasks_assignments
 *      where created_at >= now() - interval '4 weeks';
 *
 *      -- 5. Weekly task completion data for the last 4 weeks
 *      with weeks as (
 *        select generate_series(
 *          date_trunc('week', now()) - interval '3 weeks',
 *          date_trunc('week', now()),
 *          '1 week'::interval
 *        ) as week_start
 *      )
 *      select json_agg(
 *        json_build_object(
 *          'name', 'Week of ' || to_char(w.week_start, 'Mon DD'),
 *          'assigned', (
 *            select count(*) from public.tasks_assignments
 *            where created_at >= w.week_start and created_at < w.week_start + interval '1 week'
 *          ),
 *          'completed', (
 *            select count(*) from public.tasks_assignments
 *            where status = 'done' and created_at >= w.week_start and created_at < w.week_start + interval '1 week'
 *          )
 *        ) order by w.week_start
 *      )
 *      into weekly_completion_data
 *      from weeks w;
 *
 *      -- 6. User engagement breakdown
 *      select json_agg(
 *        json_build_object('name', activity, 'value', count)
 *      )
 *      into engagement_data
 *      from (
 *        select 'Tasks' as activity, count(*) from public.tasks_assignments where status = 'done'
 *        union all
 *        select 'Challenges' as activity, count(*) from public.weekly_participants
 *        union all
 *        select 'Messages' as activity, count(*) from public.messages
 *        union all
 *        select 'Prayers' as activity, count(*) from public.prayer_requests
 *      ) as engagement_counts;
 *
 *      -- 7. Combine all results into a single JSON object
 *      select json_build_object(
 *        'totalMembers', json_build_object('value', total_members_count, 'change', new_members_count),
 *        'activeUsers', json_build_object('value', active_users_count, 'total', total_members_count),
 *        'avgTaskCompletion', avg_completion,
 *        'taskCompletion', weekly_completion_data,
 *        'engagement', engagement_data
 *      ) into result;
 *
 *      return result;
 *    end;
 *    $$;
 *
 *    -- UPDATED: Function to approve a coin transaction and update user coins
 *    -- First, remove the function that expects a UUID
 *    DROP FUNCTION IF EXISTS public.approve_coin_transaction(transaction_id uuid);
 * 
 *    -- Now, create the function to correctly accept a BIGINT (int8)
 *    CREATE OR REPLACE FUNCTION approve_coin_transaction(p_transaction_id bigint)
 *    RETURNS void
 *    LANGUAGE plpgsql
 *    SECURITY DEFINER
 *    AS $$
 *    DECLARE
 *      tx_user_id uuid;
 *      tx_coin_amount int;
 *    BEGIN
 *      -- Get user_id and coin_amount from the transaction using the BIGINT id
 *      SELECT user_id, coin_amount INTO tx_user_id, tx_coin_amount
 *      FROM public.coin_transactions
 *      WHERE id = p_transaction_id AND status = 'pending';
 *
 *      -- Proceed only if a pending transaction was found
 *      IF found THEN
 *        -- Update the transaction status to 'approved'
 *        UPDATE public.coin_transactions
 *        SET status = 'approved'
 *        WHERE id = p_transaction_id;
 *
 *        -- Atomically update the user's coin balance
 *        UPDATE public.profiles
 *        SET coins = coins + tx_coin_amount
 *        WHERE id = tx_user_id;
 *      END IF;
 *    END;
 *    $$;
 *
 *    -- NEW: Function to assign a daily task to all users and create notifications
 *    create or replace function assign_task_to_all_users(task_id_to_assign uuid)
 *    returns void
 *    language plpgsql
 *    security definer
 *    as $$
 *    declare
 *      user_record record;
 *      task_title text;
 *    begin
 *      -- Get the task title for the notification message
 *      select title into task_title from public.tasks where id = task_id_to_assign;
 *
 *      -- Loop through all users with a profile
 *      for user_record in select id from public.profiles loop
 *        -- Insert the task assignment
 *        insert into public.tasks_assignments(task_id, assignee_id, status)
 *        values (task_id_to_assign, user_record.id, 'assigned');
 *
 *        -- Create a notification for the user
 *        insert into public.notifications(user_id, type, message, link)
 *        values (user_record.id, 'task_assigned', 'A new daily task has been assigned: "' || task_title || '"', '/tasks');
 *      end loop;
 *    end;
 *    $$;
 * 
 *    ```
 */
