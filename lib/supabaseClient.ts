import { createClient, SupabaseClient } from '@supabase/supabase-js';

// --- IMPORTANT ---
// These credentials must be stored in environment variables.
// In development, you can use a .env file. For production, configure them
// on your hosting platform.
const supabaseUrl = 'https://tblkfcafwjconemdcrpk.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRibGtmY2Fmd2pjb25lbWRjcnBrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI4MjMwNDksImV4cCI6MjA2ODM5OTA0OX0.RMf4-H4z9I8rdzroyl_an390s0SggD_5TqPw30vDV5Q';

// The createClient function requires strings. If the env vars are missing,
// we initialize supabase as null and the app will show a degraded state.
export const supabase: SupabaseClient | null = (supabaseUrl && supabaseAnonKey)
    ? createClient(supabaseUrl, supabaseAnonKey)
    : null;

if (!supabase) {
    console.error("Supabase URL and/or Anon Key are missing from environment variables (SUPABASE_URL, SUPABASE_ANON_KEY). The application will not be able to connect to Supabase and will be in a read-only/mocked state.");
}

/**
 * --- RECOMMENDED SUPABASE SETUP ---
 * 
 * 1. Authentication:
 *    - Enable Email provider.
 *    - Disable "Enable email confirmations" in development for easier testing.
 * 
 * 2. Database Tables & SQL Snippets:
 *    - Run the following SQL in your Supabase project's SQL Editor
 *      to create the necessary tables for the application features.
 * 
 *    ```sql
 *    -- ================================================================================================
 *    -- === CORE USER & ROLE SETUP                                                                   ===
 *    -- ================================================================================================
 *
 *    -- 1. Create public.profiles table
 *    CREATE TABLE IF NOT EXISTS public.profiles (
 *        id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
 *        full_name text,
 *        avatar_url text,
 *        fellowship_position text,
 *        level integer DEFAULT 1 NOT NULL,
 *        department text,
 *        gender text,
 *        dob text,
 *        whatsapp text,
 *        hotline text,
 *        email text UNIQUE,
 *        coins integer DEFAULT 0 NOT NULL,
 *        created_at timestamp with time zone DEFAULT now(),
 *        updated_at timestamp with time zone DEFAULT now()
 *    );
 *    COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';
 *
 *    -- 2. Create user_roles table
 *    CREATE TABLE IF NOT EXISTS public.user_roles (
 *        id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 *        user_id uuid NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
 *        role text NOT NULL CHECK (role IN ('member', 'admin', 'blog', 'media', 'pro', 'academics', 'finance')),
 *        created_at timestamp with time zone DEFAULT now()
 *    );
 *    COMMENT ON TABLE public.user_roles IS 'Stores a single role for each user (e.g., member, admin, finance).';
 *
 *    -- 3. Enable Row Level Security (RLS) for tables
 *    ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
 *    ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;
 *
 *    -- 4. Create RLS policies for profiles table
 *    DROP POLICY IF EXISTS "Authenticated users can view profiles" ON public.profiles;
 *    DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
 *    DROP POLICY IF EXISTS "Users can insert their own profile" ON public.profiles;
 *    CREATE POLICY "Authenticated users can view profiles" ON public.profiles FOR SELECT TO authenticated USING (true);
 *    CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);
 *    CREATE POLICY "Users can insert their own profile" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);
 *
 *    -- ================================================================================================
 *    -- === NEW: GAMIFIED ONBOARDING SYSTEM (Run this to enable the Welcome Challenge)               ===
 *    -- ================================================================================================
 *
 *    -- 1. Create onboarding_progress table
 *    CREATE TABLE IF NOT EXISTS public.onboarding_progress (
 *        user_id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
 *        completed_profile boolean DEFAULT false NOT NULL,
 *        sent_first_message boolean DEFAULT false NOT NULL,
 *        rsvpd_to_event boolean DEFAULT false NOT NULL,
 *        created_at timestamp with time zone DEFAULT now()
 *    );
 *    COMMENT ON TABLE public.onboarding_progress IS 'Tracks the completion of initial tasks for new users.';
 *
 *    -- 2. Enable RLS for onboarding_progress
 *    ALTER TABLE public.onboarding_progress ENABLE ROW LEVEL SECURITY;
 *
 *    -- 3. RLS Policies for onboarding_progress
 *    DROP POLICY IF EXISTS "Users can view and update their own onboarding progress" ON public.onboarding_progress;
 *    CREATE POLICY "Users can view and update their own onboarding progress" ON public.onboarding_progress
 *    FOR ALL USING (auth.uid() = user_id);
 *    
 *    -- 4. This function now creates a profile, role, AND an onboarding record for every new user.
 *    -- It replaces any previous "handle_new_user" function.
 *    CREATE OR REPLACE FUNCTION public.handle_new_user_onboarding()
 *    RETURNS TRIGGER
 *    LANGUAGE plpgsql
 *    SECURITY DEFINER
 *    AS $$
 *    BEGIN
 *      -- Create a profile for the new user
 *      INSERT INTO public.profiles (id, full_name, email)
 *      VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.email);
 *
 *      -- Assign the default 'member' role
 *      INSERT INTO public.user_roles (user_id, role)
 *      VALUES (NEW.id, 'member');
 *
 *      -- Create the onboarding progress tracker
 *      INSERT INTO public.onboarding_progress (user_id)
 *      VALUES (NEW.id);
 *
 *      RETURN NEW;
 *    END;
 *    $$;
 *
 *    -- 5. This trigger executes the function above. It replaces any previous user creation trigger.
 *    DROP TRIGGER IF EXISTS on_auth_user_created_onboarding ON auth.users;
 *    CREATE TRIGGER on_auth_user_created_onboarding
 *      AFTER INSERT ON auth.users
 *      FOR EACH ROW EXECUTE FUNCTION public.handle_new_user_onboarding();
 *      
 *    -- 6. Update coin_transactions source_type to include 'onboarding'
 *    -- If you created `source_type` as a CHECK constraint, you will need to manually update it.
 *    -- If it is an ENUM type, this command should work. The name may vary (e.g., `public.source_type`).
 *    DO $$
 *    BEGIN
 *        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'source_type_enum') THEN
 *            CREATE TYPE public.source_type_enum AS ENUM ('task', 'challenge', 'admin_adjustment', 'quiz', 'onboarding');
 *        ELSE
 *            ALTER TYPE public.source_type_enum ADD VALUE IF NOT EXISTS 'onboarding';
 *        END IF;
 *    END
 *    $$;
 *
 *    -- ================================================================================================
 *    -- === END OF GAMIFIED ONBOARDING SYSTEM                                                        ===
 *    -- ================================================================================================
 * 
 *    ```
 * 
 */